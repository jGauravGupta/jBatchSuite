/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jbatch.code.templates.parallelization.partition;

import java.util.HashSet;
import java.util.Set;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.jbatch.code.templates.wizard.ConstraintIterator;
import org.netbeans.jbatch.code.templates.wizard.WizardPanel;
import org.openide.loaders.TemplateWizard;
import org.openide.util.NbBundle;

public class PartitionPanelVisual extends WizardPanel implements DocumentListener {

    /**
     * Creates new form PartitionPanelVisual
     */
    public PartitionPanelVisual(TemplateWizard wizard) {
        super(wizard);
        initComponents();
        injectedName_TextField.getDocument().addDocumentListener(this);
    }
    private final Set<ChangeListener> listeners = new HashSet<ChangeListener>(1);

    public final void addChangeListener(ChangeListener l) {
        synchronized (listeners) {
            listeners.add(l);
        }
    }

    public final void removeChangeListener(ChangeListener l) {
        synchronized (listeners) {
            listeners.remove(l);
        }
    }

    private void fireChangeEvent() {
        ChangeEvent e = new ChangeEvent(this);
        for (ChangeListener l : listeners) {
            l.stateChanged(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        injectedName_Label = new javax.swing.JLabel();
        injectedName_TextField = new javax.swing.JTextField();
        partitionType_LayeredPane = new javax.swing.JLayeredPane();
        mapper_CheckBox = new javax.swing.JCheckBox();
        reducer_CheckBox = new javax.swing.JCheckBox();
        collector_CheckBox = new javax.swing.JCheckBox();
        analyzer_CheckBox = new javax.swing.JCheckBox();

        injectedName_Label.setText(org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.injectedName_Label.text")); // NOI18N

        injectedName_TextField.setColumns(20);

        partitionType_LayeredPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.partitionType_LayeredPane.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), new java.awt.Color(102, 102, 102))); // NOI18N
        partitionType_LayeredPane.setLayout(new java.awt.GridLayout(4, 1));

        mapper_CheckBox.setText(org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.mapper_CheckBox.text")); // NOI18N
        mapper_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapper_CheckBoxActionPerformed(evt);
            }
        });
        partitionType_LayeredPane.add(mapper_CheckBox);

        reducer_CheckBox.setText(org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.reducer_CheckBox.text")); // NOI18N
        reducer_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reducer_CheckBoxActionPerformed(evt);
            }
        });
        partitionType_LayeredPane.add(reducer_CheckBox);

        collector_CheckBox.setText(org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.collector_CheckBox.text")); // NOI18N
        collector_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collector_CheckBoxActionPerformed(evt);
            }
        });
        partitionType_LayeredPane.add(collector_CheckBox);

        analyzer_CheckBox.setText(org.openide.util.NbBundle.getMessage(PartitionPanelVisual.class, "PartitionPanelVisual.analyzer_CheckBox.text")); // NOI18N
        analyzer_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzer_CheckBoxActionPerformed(evt);
            }
        });
        partitionType_LayeredPane.add(analyzer_CheckBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(injectedName_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(injectedName_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(partitionType_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(injectedName_Label)
                    .addComponent(injectedName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(partitionType_LayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mapper_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapper_CheckBoxActionPerformed
        fireChangeEvent();
    }//GEN-LAST:event_mapper_CheckBoxActionPerformed

    private void reducer_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reducer_CheckBoxActionPerformed
        fireChangeEvent();
    }//GEN-LAST:event_reducer_CheckBoxActionPerformed

    private void collector_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collector_CheckBoxActionPerformed
        fireChangeEvent();
    }//GEN-LAST:event_collector_CheckBoxActionPerformed

    private void analyzer_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzer_CheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analyzer_CheckBoxActionPerformed

    public boolean validateTemplate(TemplateWizard wizard) {
        this.setWizard(wizard);
        wizard.putProperty(TemplateWizard.PROP_ERROR_MESSAGE, null);
//        if ("".equals(injectedName_TextField.getText().trim())) {
//            wizard.putProperty(TemplateWizard.PROP_ERROR_MESSAGE, NbBundle.getMessage(ConstraintPanelVisual.class, "ERR_Empty_validator_class"));
//            return false;
//        }
        if (!mapper_CheckBox.isSelected() && !reducer_CheckBox.isSelected() && !collector_CheckBox.isSelected() && !analyzer_CheckBox.isSelected()) {
            wizard.putProperty(TemplateWizard.PROP_ERROR_MESSAGE, NbBundle.getMessage(PartitionPanelVisual.class, "ERR_No_Model_Type"));
            return false;
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox analyzer_CheckBox;
    private javax.swing.JCheckBox collector_CheckBox;
    private javax.swing.JLabel injectedName_Label;
    private javax.swing.JTextField injectedName_TextField;
    private javax.swing.JCheckBox mapper_CheckBox;
    private javax.swing.JLayeredPane partitionType_LayeredPane;
    private javax.swing.JCheckBox reducer_CheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    public void store(TemplateWizard settings) {
        settings.putProperty(ConstraintIterator.WizardProperties.NAMED, injectedName_TextField.getText().trim());
        settings.putProperty(ConstraintIterator.WizardProperties.MAPPER, mapper_CheckBox.isSelected());
        settings.putProperty(ConstraintIterator.WizardProperties.REDUCER, reducer_CheckBox.isSelected());
        settings.putProperty(ConstraintIterator.WizardProperties.COLLECTOR, collector_CheckBox.isSelected());
        settings.putProperty(ConstraintIterator.WizardProperties.ANALYZER, analyzer_CheckBox.isSelected());
    }
}
