<#-- Copyright [2014] Gaurav Gupta
 
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at
 
http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License. -->
<#if (project.licensePath)??><#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "${project.licensePath}"></#if>
<#if package?? && package != "">

package ${package};
</#if>
<#assign interface = [] >
<#if mapper == true>
import javax.batch.api.partition.PartitionMapper;
import javax.batch.api.partition.PartitionPlan;
<#assign interface = interface + ["PartitionMapper"]>
</#if>
<#if reducer == true>
import javax.batch.api.partition.PartitionReducer;
<#assign interface = interface + ["PartitionReducer"] >
</#if>
<#if collector == true>
import java.io.Serializable;
import javax.batch.api.partition.PartitionCollector;
<#assign interface = interface + ["PartitionCollector"] >
</#if>
<#if analyzer == true>
import java.io.Serializable;
import javax.batch.api.partition.PartitionAnalyzer;
import javax.batch.runtime.BatchStatus;
<#assign interface = interface + ["PartitionAnalyzer"] >
</#if>
import javax.inject.Named;

<#if user??>
/**
 *
 * @author ${user}
 */

</#if>
<#if named?has_content>
@Named("${named}")
<#else>
@Named
</#if>
public class ${name} implements <#list interface as x>${x}<#if x_has_next>, </#if></#list> {

<#if mapper == true>
    @Override
    public PartitionPlan mapPartitions() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); 
    }
</#if>
<#if reducer == true>
     @Override
    public void beginPartitionedStep() throws Exception {
        System.out.println("beginPartitionedStep");
    }

    @Override
    public void beforePartitionedStepCompletion() throws Exception {
        System.out.println("beforePartitionedStepCompletion");
    }

    @Override
    public void rollbackPartitionedStep() throws Exception {
        System.out.println("rollbackPartitionedStep");
    }

    @Override
    public void afterPartitionedStepCompletion(PartitionStatus ps) throws Exception {
        System.out.println("afterPartitionedStepCompletion");
    }
</#if>
<#if collector == true>

    @Override
    public Serializable collectPartitionData() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); 
    }
</#if>
<#if analyzer == true>

    @Override
    public void analyzeCollectorData(Serializable srlzbl) throws Exception {
        System.out.println("analyzeCollectorData");
    }

    @Override
    public void analyzeStatus(BatchStatus bs, String string) throws Exception {
        System.out.println("analyzeStatus");
    }
</#if>

}
