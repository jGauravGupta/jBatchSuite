//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.05.19 at 12:02:26 AM IST
//
package org.netbeans.jbatch.modeler.spec;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.netbeans.jbatch.modeler.spec.core.BaseElement;
import org.netbeans.jbatch.modeler.spec.core.FlowNode;
import org.netbeans.jbatch.modeler.spec.core.SequenceFlow;
import org.netbeans.modeler.specification.model.document.IRootElement;
import org.netbeans.modeler.specification.model.document.core.IBaseElement;

/**
 * The type of a job definition, whether concrete or
 *
 * abstract. This is the type of the root element of any JSL document.
 *
 * <p>
 * Java class for Job complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="Job">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="properties" type="{http://xmlns.jcp.org/xml/ns/javaee}Properties" minOccurs="0"/>
 *         &lt;element name="listeners" type="{http://xmlns.jcp.org/xml/ns/javaee}Listeners" minOccurs="0"/>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element name="decision" type="{http://xmlns.jcp.org/xml/ns/javaee}Decision"/>
 *           &lt;element name="flow" type="{http://xmlns.jcp.org/xml/ns/javaee}Flow"/>
 *           &lt;element name="split" type="{http://xmlns.jcp.org/xml/ns/javaee}Split"/>
 *           &lt;element name="step" type="{http://xmlns.jcp.org/xml/ns/javaee}Step"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="version" use="required" type="{http://www.w3.org/2001/XMLSchema}string" fixed="1.0" />
 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;attribute name="restartable" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlRootElement(name = "job", namespace = "http://xmlns.jcp.org/xml/ns/javaee")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Job", propOrder = {
    "properties",
    "listeners",
    "decisionOrFlowOrSplit",
    "sequenceFlow"
})
public class Job extends BaseElement implements IRootElement {

    protected Properties properties;
    protected Listeners listeners;
    @XmlElements({
        @XmlElement(name = "decision", type = Decision.class),
        @XmlElement(name = "flow", type = Flow.class),
        @XmlElement(name = "split", type = Split.class),
        @XmlElement(name = "step", type = Step.class)
    })
    protected List<FlowNode> decisionOrFlowOrSplit = new ArrayList<FlowNode>();

    private List<SequenceFlow> sequenceFlow = new ArrayList<SequenceFlow>(); //Custom Added

    @XmlAttribute(name = "version", required = true)
    protected String version = "1.0";
//    @XmlAttribute(name = "id", required = true)
//    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
//    @XmlID
//    @XmlSchemaType(name = "ID")
//    protected String id;
    @XmlAttribute(name = "restartable")
    protected Boolean restartable = false;
    @XmlAttribute(name = "key")
    private String key;//custom added

    /**
     * Gets the value of the properties property.
     *
     * @return possible object is {@link Properties }
     *
     */
    public Properties getProperties() {
        return properties;
    }

    /**
     * Sets the value of the properties property.
     *
     * @param value allowed object is {@link Properties }
     *
     */
    public void setProperties(Properties value) {
        this.properties = value;
    }

    /**
     * Gets the value of the listeners property.
     *
     * @return possible object is {@link Listeners }
     *
     */
    public Listeners getListeners() {
        return listeners;
    }

    /**
     * Sets the value of the listeners property.
     *
     * @param value allowed object is {@link Listeners }
     *
     */
    public void setListeners(Listeners value) {
        this.listeners = value;
    }

    /**
     * Gets the value of the decisionOrFlowOrSplit property.
     *
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the decisionOrFlowOrSplit property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDecisionOrFlowOrSplit().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list null null null
     * null null null null null null null null null null null null null null     {@link Decision }
     * {@link Flow }
     * {@link Split }
     * {@link Step }
     *
     *
     */
    public List<FlowNode> getDecisionOrFlowOrSplit() {
        if (decisionOrFlowOrSplit == null) {
            decisionOrFlowOrSplit = new ArrayList<FlowNode>();
        }
        return this.decisionOrFlowOrSplit;
    }

    /**
     * Gets the value of the version property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getVersion() {
        if (version == null) {
            return "1.0";
        } else {
            return version;
        }
    }

    /**
     * Sets the value of the version property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setVersion(String value) {
        this.version = value;
    }

//    /**
//     * Gets the value of the id property.
//     *
//     * @return possible object is {@link String }
//     *
//     */
//    public String getId() {
//        return id;
//    }
//
//    /**
//     * Sets the value of the id property.
//     *
//     * @param value allowed object is {@link String }
//     *
//     */
//    public void setId(String value) {
//        this.id = value;
//    }
    /**
     * Gets the value of the restartable property.
     *
     * @return possible object is {@link String }
     *
     */
    public Boolean getRestartable() {
        return restartable;
    }

    /**
     * Sets the value of the restartable property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setRestartable(Boolean value) {
        this.restartable = value;
    }

//       @Override
//    public void removeBaseElement(IBaseElement baseElement_In) {
//        if (baseElement_In instanceof TFlowElement) {
//            this.removeFlowElement((TFlowElement) baseElement_In);
//        } else if (baseElement_In instanceof TArtifact) {
//            this.removeArtifact((TArtifact) baseElement_In);
//        }
//    }
//
//    @Override
//    public void addBaseElement(IBaseElement baseElement_In) {
//        if (baseElement_In instanceof TFlowElement) {
//            this.addFlowElement((TFlowElement) baseElement_In);
//        } else if (baseElement_In instanceof TArtifact) {
//            this.addArtifact((TArtifact) baseElement_In);
//        }
//    }
    @Override
    public void removeBaseElement(IBaseElement baseElement_In) {
        if (baseElement_In instanceof FlowNode) {
            decisionOrFlowOrSplit.remove((FlowNode) baseElement_In);
        } else if (baseElement_In instanceof SequenceFlow) {
            getSequenceFlow().remove((SequenceFlow) baseElement_In);
        }
    }

    @Override
    public void addBaseElement(IBaseElement baseElement_In) {
        if (baseElement_In instanceof FlowNode) {
            decisionOrFlowOrSplit.add((FlowNode) baseElement_In);
        } else if (baseElement_In instanceof SequenceFlow) {
            getSequenceFlow().add((SequenceFlow) baseElement_In);
        }
    }

    public FlowNode findFlowNode(String id) {
        for (FlowNode flowNode : decisionOrFlowOrSplit) {
            if (flowNode.getId().equals(id)) {
                return flowNode;
            }
        }
        return null;
    }

    /**
     * @return the sequenceFlow
     */
    public List<SequenceFlow> getSequenceFlow() {
        return sequenceFlow;
    }

    /**
     * @param sequenceFlow the sequenceFlow to set
     */
    public void setSequenceFlow(List<SequenceFlow> sequenceFlow) {
        this.sequenceFlow = sequenceFlow;
    }

    /**
     * @return the key
     */
    public String getKey() {
        return key;
    }

    /**
     * @param key the key to set
     */
    public void setKey(String key) {
        this.key = key;
    }

}
